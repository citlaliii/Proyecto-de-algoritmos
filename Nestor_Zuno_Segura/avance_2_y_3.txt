Modificacioners en las funciones
    
      def process_camera(self):
        image = self.webcam.read()
        if image is not None:
            image.flags.writeable = False
            image = cv2.flip(image, 1)
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            image.flags.writeable = True
            image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
            results = self.face_mesh.process(image)
            self.webcam_image = image
            if results.multi_face_landmarks is not None:
                for face_landmarks in results.multi_face_landmarks:

                    # Coordenadas de la cara (arriba y abajo)
                    top = (face_landmarks.landmark[10].x, face_landmarks.landmark[10].y)
                    bottom = (face_landmarks.landmark[152].x, face_landmarks.landmark[152].y)

                    # Obtener coordenadas del 'cuadrado' de la cara para poder mostrarlo en la pantalla después
                    self.face_left_x = face_landmarks.landmark[234].x
                    self.face_right_x = face_landmarks.landmark[454].x
                    self.face_top_y = face_landmarks.landmark[10].y
                    self.face_bottom_y = face_landmarks.landmark[152].y

                    # Dejar algo de espacio alrededor
                    self.face_left_x = self.face_left_x - .1
                    self.face_right_x = self.face_right_x + .1
                    self.face_top_y = self.face_top_y - .1
                    self.face_bottom_y = self.face_bottom_y + .1

                    """cv2.line(
                        self.webcam_image,
                        (int(top[0] * self.webcam.width()), int(top[1] * self.webcam.height())),
                        (int(bottom[0] * self.webcam.width()), int(bottom[1] * self.webcam.height())),
                        (0, 255, 0), 3
                    )

                    cv2.circle(self.webcam_image, (int(top[0] * self.webcam.width()), int(top[1] * self.webcam.height())),
                                8, (0, 0, 255), -1)
                    cv2.circle(self.webcam_image, (int(bottom[0] * self.webcam.width()), int(bottom[1] * self.webcam.height())),
                                8, (0, 0, 255), -1)"""

                    # Detección de ángulo
                    self.detect_head_movement(top, bottom)

            k = cv2.waitKey(1) & 0xFF

    def detect_head_movement(self, top, bottom):
        radians = math.atan2(bottom[1] - top[1], bottom[0] - top[0])
        degrees = math.degrees(radians)

        # Ángulo de detección de 70 a 110 (-1 a 1)
        min_degrees = 70
        max_degrees = 110
        degree_range = max_degrees - min_degrees

        if degrees < min_degrees: degrees = min_degrees
        if degrees > max_degrees: degrees = max_degrees

        self.movement = (((degrees - min_degrees) / degree_range) * 2) - 1

    def render_camera(self):
        # Limpiar coordenadas del cuadro de la cara
        if self.face_left_x < 0: self.face_left_x = 0
        if self.face_right_x > 1: self.face_right_x = 1
        if self.face_top_y < 0: self.face_top_y = 0
        if self.face_bottom_y > 1: self.face_bottom_y = 1

        face_surf = pygame.image.frombuffer(self.webcam_image, (int(self.webcam.width()), int(self.webcam.height())), "BGR")

        face_rect = pygame.Rect(
            int(self.face_left_x * self.webcam.width()),
            int(self.face_top_y * self.webcam.height()),
            int(self.face_right_x * self.webcam.width()) - int(self.face_left_x * self.webcam.width()),
            int(self.face_bottom_y * self.webcam.height()) - int(self.face_top_y * self.webcam.height())
        )

        only_face_surf = pygame.Surface((
            int(self.face_right_x * self.webcam.width()) - int(self.face_left_x * self.webcam.width()),
            int(self.face_bottom_y * self.webcam.height()) - int(self.face_top_y * self.webcam.height())
        ))
        only_face_surf.blit(face_surf, (0, 0), face_rect)

        height = only_face_surf.get_rect().height
        width = only_face_surf.get_rect().width
        if width == 0:
            width = 1
        face_ratio = height / width
        face_area_width = 130
        face_area_height = face_area_width * face_ratio
        if (face_area_height > self.max_face_surf_height):
            self.max_face_surf_height = face_area_height
        only_face_surf = pygame.transform.scale(only_face_surf, (int(face_area_width), int(self.max_face_surf_height)))
        self.screen.blit(only_face_surf, only_face_surf.get_rect())

class Webcam:
    def __init__(self):
        # Inicialización de variables
        self.stopped = False
        self.stream = None
        self.lastFrame = None
        self.os_name = platform.system()

    def start(self):
        # Actualizar continuamente la captura de la webcam
        t = Thread(target=self.update, args=())
        t.daemon = True
        t.start()
        return self

    def update(self):
        # Inicia la captura de video de la webcam
        if self.stream is None:
            if self.os_name == "Windows":
                self.stream = cv2.VideoCapture(0, cv2.CAP_DSHOW)
            elif self.os_name == "Darwin": #macOS
                self.stream = cv2.VideoCapture(0, cv2.CAP_AVFOUNDATION)
            else: # Linux
                self.stream = cv2.VideoCapture(0, cv2.CAP_V4L)
        # Bucle para actualizar continuamente el último fotograma
        while True:
            if self.stopped:
                return
            (result, image) = self.stream.read()
            if not result:
                self.stop()
                return
            self.lastFrame = image
                
    def read(self):
        # Devuelve el último fotograma capturado por la webcam
        return self.lastFrame

    def stop(self):
        # Detiene la captura de la webcam
        self.stopped = True

    def width(self):
        # Obtiene el ancho del fotograma capturado por la webcam
        return self.stream.get(cv2.CAP_PROP_FRAME_WIDTH )

    def height(self):
        # Obtiene la altura del fotograma capturado por la webcam
        return self.stream.get(cv2.CAP_PROP_FRAME_HEIGHT )
    
    def ready(self):
        # Verifica si la webcam está lista y ha capturado al menos un fotograma
        return self.lastFrame is not None
    
